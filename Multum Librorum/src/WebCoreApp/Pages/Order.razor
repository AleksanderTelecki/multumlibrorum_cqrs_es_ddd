@page "/order"
@using WebCoreApp.Abstract
@using WebCoreApp.Services
@using CQRS.Communication.Abstract
@using Client.Messages.Models
@using CQRS.Communication.Enums
@using Sales.Messages.Models
@using Sales.Messages.Queries
<MudContainer Class="my-12 py-12">
<MudTable Items="@Orders"  Hover="true" Breakpoint="Breakpoint.Sm">
<ToolBarContent>
            <MudText Typo="Typo.h6">Orders</MudText>
            <MudSpacer />
        </ToolBarContent>
	<ColGroup>
		<col />
		<col />
		<col />
		<col />
	</ColGroup>
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh>Order Id</MudTh>
		<MudTh>Order State</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.OrderModel.OrderId))">@((context.ShowDetails == true)? "Hide" : "Show") Order Details</MudButton></MudTd>
		<MudTd DataLabel="Order Id">@context.OrderModel.OrderId</MudTd>
		<MudTd DataLabel="Order State">@context.OrderModel.State.ToString()</MudTd>
	</RowTemplate>
	<ChildRowContent>
		@if (context.ShowDetails)
		{
			<MudTr>
				<td colspan="4">
					<MudCard Elevation="0">
						<MudCardHeader>
							<CardHeaderContent>
								<MudText Typo="Typo.body1">Order Details</MudText>
							</CardHeaderContent>
						</MudCardHeader>
						<MudCardContent Class="pa-0">
							<MudTable Items="@context.OrderModel.Items" Context="OrderItemContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
								<ColGroup>
									<col />
									<col />
									<col />
								</ColGroup>
								<HeaderContent>
									<MudTh>Product Name</MudTh>
									<MudTh>Product Price</MudTh>
									<MudTh>Quantity</MudTh>
								</HeaderContent>
								<RowTemplate>
									<MudTd DataLabel="Product Name">@OrderItemContext.ProductName</MudTd>
									<MudTd DataLabel="Product Price">$ @OrderItemContext.ProductPrice</MudTd>
									<MudTd DataLabel="Quantity">@OrderItemContext.Quantity</MudTd>
								</RowTemplate>
								<FooterContent>
									<MudTd>Price Sum: $ @context.OrderModel.Items.Sum(x=>x.ProductPrice)</MudTd>
								</FooterContent>
							</MudTable>
						</MudCardContent>
					</MudCard>
				</td>
			</MudTr>
		}
	</ChildRowContent>
</MudTable>
</MudContainer>

@inject ILoginService LoginService
@inject IRestDispatcher RestDispatcher
@inject SuccessHandlerService SuccessHandlerService
@inject ErrorHandlerService ErrorHandlerService
@code
{

	public class OrderWraper
	{
		public OrderModel OrderModel { get; set; }
		public bool ShowDetails { get; set; }
	}
	
	private List<OrderWraper> Orders = new List<OrderWraper>();
	private TokenWithUserInfo _tokenWithUserInfo;
	private string searchString = "";
	
	protected override async Task OnInitializedAsync()
	{
		_tokenWithUserInfo = await LoginService.IsUserLogin();
		var orders = await RestDispatcher.DispatchQuery(new GetClientOrdersModelQuery() { ClientId = _tokenWithUserInfo.UserId }, EndpointEnum.SalesEndpoint);

		foreach (var order in orders)
		{
			Orders.Add(new OrderWraper() {OrderModel = order});
		}
	}

	private void ShowBtnPress(Guid orderId)
	{
		var tmpOrder = Orders.First(x=>x.OrderModel.OrderId == orderId);
		tmpOrder.ShowDetails = !tmpOrder.ShowDetails;
	}
}