@page "/"
@using CQRS.Communication.Abstract
@using Client.Messages.Queries
@using CQRS.Communication.Enums
@using Product.Messages.Events.Models
@using Product.Messages.Queries
@using WebCoreApp.Abstract
@using WebCoreApp.Pages.Dialogs
@using Client.Messages.Models
@using Sales.Messages.Commands
@using Sales.Messages.Queries
@using WebCoreApp.Services


<MudPaper Elevation="3" Class="mx-2">
        <MudTable Loading="books == null" RowsPerPage="50" Height="calc(100vh - 185px)" Hover="true" FixedFooter="true" FixedHeader="true" Items="@books" Filter="new Func<BookModel, bool>(FilterFunc1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Our Books</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search books" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col  />
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.Author)">Author</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.PromotedPrice)">Promoted Price</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.PageCount)">Page Count</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<BookModel, object>(x=>x.Quantity)">Quantity</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">@context.Title</MudTd>
                <MudTd DataLabel="Author">@context.Author</MudTd>
                <MudTd DataLabel="Price"  >$ @context.Price</MudTd>
                <MudTd DataLabel="Promoted Price" Style="color: green;" >@(context.PromotedPrice != null ? $"$ {context.PromotedPrice}" : "")</MudTd>
                <MudTd DataLabel="Page Count"> @context.PageCount </MudTd>
                <MudTd DataLabel="Quantity"> @context.Quantity </MudTd>
                <MudTd Style="text-align:center">
                    <MudButton Variant="Variant.Outlined" OnClick="@((e) => OpenDialog(context))" Size="Size.Small">Details</MudButton>
                    @if (_tokenWithUserInfo != null)
                    {
                        <MudButton Class="ml-2" Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => AddToCart(context))">Add To Cart</MudButton>
                    }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>

@inject IRestDispatcher restDispatcher
@inject IDialogService Dialog
@inject ILoginService LoginService
@inject SuccessHandlerService SuccessHandlerService
@code {
    private string searchTerm;
    private IEnumerable<BookModel> books;
    private string searchString1 = "";
    private Guid cartId;
    private TokenWithUserInfo _tokenWithUserInfo;

    private void OpenDialog(BookModel bookModel)
    {
        var parameters = new DialogParameters();
        parameters.Add("Book", bookModel);

        var options = new DialogOptions() { FullWidth = true, CloseButton = true };
        Dialog.Show<BookDetailsDialog>("Book details dialog", parameters, options);
    }
    
    protected override async Task OnInitializedAsync()
    {
        books = await restDispatcher.DispatchQuery(new GetAllBooksQuery(), EndpointEnum.ProductEndpoint);
        
        _tokenWithUserInfo = await LoginService.IsUserLogin();

        if (_tokenWithUserInfo != null)
        {
            cartId = await restDispatcher.DispatchQuery(new GetClientCartIdQuery() { ClientId = _tokenWithUserInfo.UserId }, EndpointEnum.SalesEndpoint);
        }
        
        StateHasChanged();
    }
    
    private bool FilterFunc1(BookModel bookModel) => FilterFunc(bookModel, searchString1);

    private bool FilterFunc(BookModel bookModel, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (bookModel.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (bookModel.Author.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{bookModel.Author} {bookModel.Title} {bookModel.Description}".Contains(searchString))
            return true;
        return false;
    }

    private async Task AddToCart(BookModel context)
    {
        await restDispatcher.DispatchCommand(new AddItemToCartCommand() { Id = cartId, ProductId = context.Id, Quantity = 1 }, EndpointEnum.SalesEndpoint);
        SuccessHandlerService.ShowSuccess("Item added to cart.");
    }

}