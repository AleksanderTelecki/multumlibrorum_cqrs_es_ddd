@using Client.Messages.Models
@using WebCoreApp.Abstract
@using WebCoreApp.Services
@inherits LayoutComponentBase

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        
        @if (_tokenWithUserInfo != null)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>

        }
        else
        {
            
        }
        
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Home" Link="/" Color="Color.Inherit" Edge="Edge.End"/>
    </MudAppBar>
    
    @if (_tokenWithUserInfo != null)
    {
        <MudDrawer d @bind-Open="_drawerOpen" Elevation="2">
            <MudDrawerHeader>
                <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
            </MudDrawerHeader>
            <NavMenu/>
        </MudDrawer>  
    }
    else
    {
        
    }
        <MudMainContent>
            @Body
        </MudMainContent>
</MudLayout>

@inject ILoginService LoginService
@inject ErrorHandlerService ErrorHandlerService
@inject SuccessHandlerService SuccessHandlerService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@code {
    TokenWithUserInfo _tokenWithUserInfo;
    
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        ErrorHandlerService.OnError += ShowSnackbar;
        SuccessHandlerService.OnSuccess += ShowSnackbarSuccess;
        _tokenWithUserInfo = await LoginService.IsEmployeeLogin();
        StateHasChanged();
    }

    public async Task Logout()
    {
        await LoginService.LogoutEmployee();
        _tokenWithUserInfo = null;
        
        NavigationManager.NavigateTo($"/adminpanel", true); 
        StateHasChanged();
    }
    
    private void ShowSnackbar(string message)
    {
        Snackbar.Add(message, Severity.Error);
    }
    
    private void ShowSnackbarSuccess(string message)
    {
        Snackbar.Add(message, Severity.Success);
    }

    public void Dispose()
    {
        ErrorHandlerService.OnError -= ShowSnackbar;
        SuccessHandlerService.OnSuccess -= ShowSnackbarSuccess;
    }

}