@using Client.Messages.Models
@using WebCoreApp.Abstract
@using WebCoreApp.Services
@inherits LayoutComponentBase

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudLink Color="Color.Inherit" Underline="Underline.None" Href="" Match="NavLinkMatch.All">
            <MudGrid Spacing="1">
                <MudItem xs="2">
                    <MudIcon Icon="@Icons.Material.Filled.Book" Color="Color.Inherit" />
                </MudItem>
                <MudItem xs="10">
                    <MudText Typo="Typo.h6">MultumLibrorum</MudText>
                </MudItem>
            </MudGrid>
        </MudLink>
        <NavMenu/>
        @if (_tokenWithUserInfo == null)
        {
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" Link="/login">Login</MudButton>
        }
        else
        {
            <MudMenu>
                <ActivatorContent>
                   <MudAvatar Color="Color.Secondary">@_tokenWithUserInfo.UserName.ToUpper()[0]</MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Link="/profile">Profile</MudMenuItem>
                    <MudMenuItem OnClick="@(()=>Logout())">Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@inject ILoginService LoginService
@inject ErrorHandlerService ErrorHandlerService
@inject ISnackbar Snackbar

@code {
    TokenWithUserInfo _tokenWithUserInfo;

    protected override async Task OnInitializedAsync()
    {
        ErrorHandlerService.OnError += ShowSnackbar;
        _tokenWithUserInfo = await LoginService.IsUserLogin();
        StateHasChanged();
    }

    public async Task Logout()
    {
        await LoginService.Logout();
        _tokenWithUserInfo = null;
        
        StateHasChanged();
    }
    
    private void ShowSnackbar(string message)
    {
        Snackbar.Add(message, Severity.Error);
    }

    public void Dispose()
    {
        ErrorHandlerService.OnError -= ShowSnackbar;
    }

}